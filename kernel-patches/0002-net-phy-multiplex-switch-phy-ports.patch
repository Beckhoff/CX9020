From 3f9d397feab33f7c1e9e399b0608fb2253c32645 Mon Sep 17 00:00:00 2001
From: Patrick Bruenn <p.bruenn@beckhoff.com>
Date: Fri, 18 Dec 2015 10:46:10 +0100
Subject: [PATCH 2/2] net: phy: multiplex switch phy ports

Devices such as CX9020 Embedded PC with only one ethernet controller
integrate internal switches to provide more than one RJ45 port.
Modify the generic phy driver to report 'link up' if any of the external
ports senses a link. Add 'phy_driver.num_phys' module option to enable
the multiplexing behaviour if set to > 1.
---
 drivers/net/phy/phy_device.c | 46 +++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 45 insertions(+), 1 deletion(-)

diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 26c41ede54a4..432539881608 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -185,6 +185,9 @@ static void features_init(void)
 			       ARRAY_SIZE(phy_10gbit_full_features_array),
 			       phy_10gbit_full_features);
 }
+static const int first_phy_addr = 1;
+static int num_phys = 1;
+module_param(num_phys, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
 
 void phy_device_free(struct phy_device *phydev)
 {
@@ -1774,6 +1777,32 @@ int genphy_read_status(struct phy_device *phydev)
 }
 EXPORT_SYMBOL(genphy_read_status);
 
+/*
+ * In case 'phy_driver.num_phy=1' this function should behave like genphy_read_status()
+ *
+ * Embedded systems such as Beckhoff CX9020 use more than one KSZ886X port
+ * to connect to the outside world. To report 'link up' until all outside
+ * ports are disconnected, this function checks for any port to be up.
+ *
+ * Return: the status of the first phy found to report a link. If no phy
+ * reports a connection, the status for the last phy is returned.
+ *
+ * This multiplexing feature is disabled by default. To enable it set the
+ * bootarg 'phy_driver.num_phys' to something > 1.
+ */
+static int genphy_read_status_multiplexed(struct phy_device *phydev)
+{
+	for (phydev->mdio.addr = first_phy_addr; phydev->mdio.addr <= num_phys;
+		++phydev->mdio.addr) {
+		int ret = genphy_read_status(phydev);
+		if (ret || phydev->link) {
+			return ret;
+		}
+	}
+	return 0;
+}
+
+
 /**
  * genphy_soft_reset - software reset the PHY via BMCR_RESET bit
  * @phydev: target phy_device struct
@@ -1795,6 +1824,20 @@ int genphy_soft_reset(struct phy_device *phydev)
 }
 EXPORT_SYMBOL(genphy_soft_reset);
 
+int genphy_soft_reset_multiplexed(struct phy_device *phydev)
+{
+        int ret;
+
+        for (phydev->mdio.addr = first_phy_addr; phydev->mdio.addr <= num_phys;
+             ++phydev->mdio.addr) {
+                ret = genphy_soft_reset(phydev);
+                if (ret)
+                        break;
+        }
+        phydev->mdio.addr = first_phy_addr;
+        return ret;
+}
+
 int genphy_config_init(struct phy_device *phydev)
 {
 	int val;
@@ -2249,10 +2292,11 @@ static struct phy_driver genphy_driver = {
 	.phy_id		= 0xffffffff,
 	.phy_id_mask	= 0xffffffff,
 	.name		= "Generic PHY",
-	.soft_reset	= genphy_no_soft_reset,
+	.soft_reset	= genphy_soft_reset_multiplexed,
 	.config_init	= genphy_config_init,
 	.features	= PHY_GBIT_ALL_PORTS_FEATURES,
 	.aneg_done	= genphy_aneg_done,
+	.read_status	= genphy_read_status_multiplexed,
 	.suspend	= genphy_suspend,
 	.resume		= genphy_resume,
 	.set_loopback   = genphy_loopback,
-- 
2.11.0

