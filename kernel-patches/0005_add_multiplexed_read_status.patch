diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index d551df6..7981936 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -41,6 +41,9 @@ MODULE_DESCRIPTION("PHY library");
 MODULE_AUTHOR("Andy Fleming");
 MODULE_LICENSE("GPL");
 
+static int num_phys = 1;
+module_param(num_phys, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+
 void phy_device_free(struct phy_device *phydev)
 {
 	put_device(&phydev->dev);
@@ -1050,6 +1053,35 @@ int genphy_read_status(struct phy_device *phydev)
 }
 EXPORT_SYMBOL(genphy_read_status);
 
+/*
+ * In case 'phy_driver.num_phy=1' this function should behave like genphy_read_status()
+ *
+ * Embedded systems such as Beckhoff CX9020 use more than one KSZ886X port
+ * to connect to the outside world. To report 'link up' until all outside
+ * ports are disconnected, this function checks for any port to be up.
+ *
+ * Return: the status of the first phy found to report a link. If no phy
+ * reports a connection, the status for the last phy is returned.
+ *
+ * This multiplexing feature is disabled by default. To enable it set the
+ * bootarg 'phy_driver.num_phys' to something > 1.
+ */
+static int genphy_read_multiplexed_status(struct phy_device *phydev)
+{
+        static const int BASE_ADDR = 1;
+
+        for (phydev->addr = BASE_ADDR; phydev->addr < num_phys; ++phydev->addr) {
+                int status = genphy_update_link(phydev);
+                if (status)
+                        return status;
+
+                if (phydev->link)
+                        return genphy_read_status(phydev);
+        }
+        return genphy_read_status(phydev);
+}
+
+
 static int gen10g_read_status(struct phy_device *phydev)
 {
 	int devad, reg;
@@ -1362,7 +1394,7 @@ static struct phy_driver genphy_driver[] = {
 			  SUPPORTED_BNC,
 	.config_aneg	= genphy_config_aneg,
 	.aneg_done	= genphy_aneg_done,
-	.read_status	= genphy_read_status,
+	.read_status	= genphy_read_multiplexed_status,
 	.suspend	= genphy_suspend,
 	.resume		= genphy_resume,
 	.driver		= { .owner = THIS_MODULE, },
